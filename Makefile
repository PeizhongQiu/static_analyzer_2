# SVF Interrupt Handler Analyzer - Simple Flat Structure

# LLVM Configuration
LLVM_CONFIG = llvm-config
LLVM_CXXFLAGS = $(shell $(LLVM_CONFIG) --cxxflags)
LLVM_LDFLAGS = $(shell $(LLVM_CONFIG) --ldflags)
LLVM_LIBS = $(shell $(LLVM_CONFIG) --libs core support analysis irreader bitreader)

# SVF Configuration
SVF_ROOT ?= /opt/svf-llvm14
SVF_AVAILABLE := $(shell test -f $(SVF_ROOT)/include/SVF-LLVM/LLVMUtil.h && echo 1 || echo 0)

# Compiler and flags
CXX = clang++
CXXFLAGS = -std=c++17 -Wall -Wno-unused-parameter $(LLVM_CXXFLAGS)
LDFLAGS = $(LLVM_LDFLAGS) $(LLVM_LIBS) -lpthread -ldl -lm

# Target
TARGET = svf_irq_analyzer

# SVF Integration
ifeq ($(SVF_AVAILABLE),1)
    CXXFLAGS += -DSVF_AVAILABLE -I$(SVF_ROOT)/include
    LDFLAGS += -L$(SVF_ROOT)/lib -lSvf
    SVF_STATUS = "‚úÖ Available"
else
    SVF_STATUS = "‚ùå Not Available - REQUIRED"
endif

# Source files (all in root directory)
SOURCES = main.cpp \
          SVFAnalyzer.cpp \
          SVFJSONOutput.cpp \
          CompileCommandsParser.cpp \
          IRQHandlerIdentifier.cpp

OBJECTS = $(SOURCES:.cpp=.o)

# Default target
all: info check-svf $(TARGET)

# Build info
info:
	@echo "SVF Interrupt Handler Analyzer"
	@echo "=============================="
	@echo "Target: $(TARGET)"
	@echo "LLVM: $(shell $(LLVM_CONFIG) --version)"
	@echo "SVF Status: $(SVF_STATUS)"
	@echo "Files: $(words $(SOURCES)) source files"
	@echo ""

# Check SVF availability
check-svf:
ifeq ($(SVF_AVAILABLE),0)
	@echo "‚ùå Error: SVF not found!"
	@echo "Please install SVF or set SVF_ROOT environment variable."
	@echo "SVF is required for this analyzer."
	@exit 1
endif

# Build target
$(TARGET): $(OBJECTS)
	@echo "üîó Linking $(TARGET)..."
	$(CXX) $(OBJECTS) -o $(TARGET) $(LDFLAGS)
	@echo "‚úÖ Build completed: $(TARGET)"

# Compile rules
%.o: %.cpp
	@echo "üî® Compiling $<..."
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean
clean:
	@echo "üßπ Cleaning..."
	rm -f $(OBJECTS) $(TARGET)
	@echo "‚úÖ Clean completed"

# Test with sample data
test: $(TARGET)
	@echo "üß™ Testing $(TARGET)..."
	./$(TARGET) --compile-commands=compile_commands.json \
	            --handlers=handler.json \
	            --output=test_results.json \
	            --verbose || echo "‚ö†Ô∏è  Test requires valid input files"

# Generate clean bitcode files
prepare-bitcode:
	@echo "‚öôÔ∏è  Generating clean bitcode files..."
	@if [ -f "ccjson_to_bc.py" ]; then \
		python3 ccjson_to_bc.py compile_commands.json; \
	else \
		echo "‚ùå ccjson_to_bc.py not found"; \
	fi

# Development build
debug: CXXFLAGS += -g -O0 -DDEBUG
debug: clean $(TARGET)
	@echo "üêõ Debug build completed"

# Release build  
release: CXXFLAGS += -O3 -DNDEBUG
release: clean $(TARGET)
	@echo "üöÄ Release build completed"

# Install
PREFIX ?= /usr/local
install: $(TARGET)
	@echo "üì¶ Installing to $(PREFIX)/bin/..."
	install -d $(PREFIX)/bin
	install -m 755 $(TARGET) $(PREFIX)/bin/
	@echo "‚úÖ Installation completed"

# Check all dependencies
check:
	@echo "üîç Checking dependencies..."
	@which $(LLVM_CONFIG) > /dev/null || (echo "‚ùå llvm-config not found" && exit 1)
	@which $(CXX) > /dev/null || (echo "‚ùå clang++ not found" && exit 1)
	@which python3 > /dev/null || echo "‚ö†Ô∏è  python3 not found (needed for bitcode generation)"
	@echo "LLVM Version: $(shell $(LLVM_CONFIG) --version)"
	@echo "SVF Status: $(SVF_STATUS)"
ifeq ($(SVF_AVAILABLE),1)
	@echo "‚úÖ All required dependencies OK"
else
	@echo "‚ùå SVF missing - please install"
	@exit 1
endif

# Show usage help
help:
	@echo "SVF Interrupt Handler Analyzer"
	@echo "=============================="
	@echo ""
	@echo "Build Commands:"
	@echo "  make all           - Build analyzer (requires SVF)"
	@echo "  make clean         - Clean build files"
	@echo "  make debug         - Build debug version"
	@echo "  make release       - Build optimized version"
	@echo "  make install       - Install to system"
	@echo ""
	@echo "Preparation:"
	@echo "  make prepare-bitcode - Generate clean .bc files"
	@echo "  make check          - Check dependencies"
	@echo "  make test           - Run test"
	@echo ""
	@echo "Usage:"
	@echo "  ./$(TARGET) --compile-commands=cc.json --handlers=h.json"
	@echo "  ./$(TARGET) --compile-commands=cc.json --handlers=h.json --verbose"
	@echo "  ./$(TARGET) --compile-commands=cc.json --handlers=h.json --generate-reports"
	@echo ""
	@echo "Required Files:"
	@echo "  compile_commands.json - From kernel build"
	@echo "  handler.json         - Interrupt handler definitions"
	@echo "  *.bc files           - Generated by prepare-bitcode"
	@echo ""
	@echo "SVF Setup:"
	@echo "  1. Install SVF from https://github.com/SVF-tools/SVF"
	@echo "  2. Set SVF_ROOT=/path/to/svf (if not /usr/local/svf)"
	@echo "  3. Run 'make check' to verify"

# Quick setup for new users
setup:
	@echo "üöÄ Setting up SVF IRQ Analyzer..."
	@echo ""
	@echo "1. Checking dependencies..."
	@make check || exit 1
	@echo ""
	@echo "2. Building analyzer..."
	@make clean all
	@echo ""
	@echo "3. Setup completed! ‚úÖ"
	@echo ""
	@echo "Next steps:"
	@echo "  - Place your compile_commands.json in this directory"
	@echo "  - Create/edit handler.json with your interrupt handlers"
	@echo "  - Run: make prepare-bitcode"
	@echo "  - Run: ./$(TARGET) --compile-commands=compile_commands.json --handlers=handler.json"

# Development helpers
count-lines:
	@echo "üìä Code statistics:"
	@wc -l $(SOURCES) *.h | tail -1
	@echo "Files: $(words $(SOURCES)) .cpp + $(words $(wildcard *.h)) .h"

check-svf-version:
	@echo "üîç SVF Version Information:"
ifeq ($(SVF_AVAILABLE),1)
	@echo "SVF Root: $(SVF_ROOT)"
	@ls -la $(SVF_ROOT)/lib/libSvf.* 2>/dev/null || echo "SVF library not found"
	@ls -la $(SVF_ROOT)/include/SVF-LLVM/ 2>/dev/null | head -3 || echo "SVF headers not found"
else
	@echo "SVF not available"
endif

.PHONY: all info check-svf clean test prepare-bitcode debug release install check help setup count-lines check-svf-version

.DEFAULT_GOAL := all
